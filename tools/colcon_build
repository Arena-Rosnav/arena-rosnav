#! /usr/bin/env bash

. "${ARENA_WS_DIR:-.}/src/arena/arena-rosnav/tools/source.bash" || return $?

SKIP_OLD="${SKIP_OLD:-1}"

BUILD_BASE='build'
INSTALL_BASE='install'
BASE_PATHS=(
    "${ARENA_WS_DIR}/src"
)

OLD_PACKAGES=()


if [ "1" = "${SKIP_OLD}" ]; then

    function recursive_mtime(){
        find "$1" \! -type l -printf "%T@\n"  | sort | tail -1 | cut -d. -f1
    }

    function package_name(){
        grep -oPm1 "(?<=<name>)[^<]+" < "$1"
    }

    for base in "${BASE_PATHS[@]}"; do
        while IFS= read -r -d '' package_xml
        do
            package_path=$(dirname "$package_xml")
            package=$(package_name "$package_xml")
            
            if [ -d "$INSTALL_BASE/$package" ] && [ "$(recursive_mtime "$INSTALL_BASE/$package")" -ge "$(recursive_mtime "$package_path")" ]; then
                OLD_PACKAGES+=("$package")
            fi
        done < <(find "$base" -type f -name 'package.xml' -print0);
    done
fi

ARGS=(
    "--build-base ${BUILD_BASE}"
    "--install-base ${INSTALL_BASE}"
    "--base-paths ${BASE_PATHS[*]}"
    "--symlink-install"
    "--continue-on-error"
    "--packages-skip ${OLD_PACKAGES[*]} qt_gui_core rqt qt_gui_cpp rqt_gui_cpp"
    "--cmake-args '-DPython3_ROOT_DIR=$(cd "${ARENA_WS_DIR}/src/arena/arena-rosnav" && poetry env info -p) -DBUILD_TESTING=OFF'"
)

eval "colcon build ${ARGS[*]} $*"

. "${ARENA_WS_DIR}/src/arena/arena-rosnav/tools/source.bash"
